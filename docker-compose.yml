name: OpenElo

services:
  api:
    image: ghcr.io/nglhrdt/open-elo-api:latest
    container_name: api
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.elo-api-path.rule=Host(`elo.${DOMAIN}`) && PathPrefix(`/api`)'
      - 'traefik.http.routers.elo-api-path.entrypoints=websecure'
      - 'traefik.http.routers.elo-api-path.tls.certresolver=letsencrypt'
      - 'traefik.http.routers.elo-api-path.tls=true'
      - 'traefik.http.routers.elo-api-path.middlewares=elo-api-strip'
      - 'traefik.http.middlewares.elo-api-strip.stripprefix.prefixes=/api'
      - 'traefik.http.services.elo-api-path.loadbalancer.server.port=3000'
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - web
    environment:
      DB_HOST: ${DB_HOST}
      DB_USERNAME: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${POSTGRES_DB}

  client:
    image: ghcr.io/nglhrdt/open-elo-client:latest
    container_name: client
    restart: unless-stopped
    depends_on:
      api:
        condition: service_healthy
    networks:
      - web
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.elo-client.rule=Host(`elo.${DOMAIN}`)'
      - 'traefik.http.services.elo-client.loadbalancer.server.port=80'
      - 'traefik.http.routers.elo-client.entrypoints=websecure'
      - 'traefik.http.routers.elo-client.tls.certresolver=letsencrypt'
      - 'traefik.http.routers.elo-client.tls=true'

  postgres:
    container_name: postgres
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - web

  traefik:
    image: traefik:v3.3
    container_name: traefik
    restart: unless-stopped
    networks:
      - web
    command:
      - '--api.insecure=true'
      - '--entryPoints.web.address=:80'
      - '--entryPoints.websecure.address=:443'
      - '--entrypoints.web.http.redirections.entrypoint.to=websecure'
      - '--entrypoints.web.http.redirections.entrypoint.scheme=https'
      - '--entrypoints.web.http.redirections.entrypoint.permanent=true'
      - '--providers.docker=true'
      - '--providers.docker.exposedbydefault=false'
      - '--certificatesresolvers.letsencrypt.acme.tlschallenge=true'
      - '--certificatesresolvers.letsencrypt.acme.email=${LETSENCRYPT_EMAIL}'
      - '--certificatesresolvers.letsencrypt.acme.storage=/traefik/acme.json'
    volumes:
      - 'traefik_letsencrypt:/traefik'
      - '/var/run/docker.sock:/var/run/docker.sock'
    ports:
      - '80:80'
      - '443:443'
    
  adminer:
      image: adminer:latest
      container_name: adminer
      restart: unless-stopped
      networks:
        - web
      labels:
        - 'traefik.enable=true'
        - 'traefik.http.routers.elo-adminer.rule=Host(`db.${DOMAIN}`)'
        - 'traefik.http.routers.elo-adminer.entrypoints=websecure'
        - 'traefik.http.routers.elo-adminer.tls.certresolver=letsencrypt'
        - 'traefik.http.routers.elo-adminer.tls=true'
        - 'traefik.http.services.elo-adminer.loadbalancer.server.port=8080'

networks:
  web:

volumes:
  traefik_letsencrypt:
  postgres-data:
