/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as LoginRouteImport } from './routes/login'
import { Route as ProtectedRouteImport } from './routes/_protected'
import { Route as ProtectedIndexRouteImport } from './routes/_protected/index'
import { Route as ProtectedUsersRouteImport } from './routes/_protected/users'
import { Route as ProtectedGamesRouteImport } from './routes/_protected/games'
import { Route as ProtectedLeaguesRouteRouteImport } from './routes/_protected/leagues.route'
import { Route as ProtectedLeaguesLeagueIdRouteImport } from './routes/_protected/leagues.$leagueId'

const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedRoute = ProtectedRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedIndexRoute = ProtectedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedUsersRoute = ProtectedUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedGamesRoute = ProtectedGamesRouteImport.update({
  id: '/games',
  path: '/games',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedLeaguesRouteRoute = ProtectedLeaguesRouteRouteImport.update({
  id: '/leagues',
  path: '/leagues',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedLeaguesLeagueIdRoute =
  ProtectedLeaguesLeagueIdRouteImport.update({
    id: '/$leagueId',
    path: '/$leagueId',
    getParentRoute: () => ProtectedLeaguesRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/leagues': typeof ProtectedLeaguesRouteRouteWithChildren
  '/games': typeof ProtectedGamesRoute
  '/users': typeof ProtectedUsersRoute
  '/': typeof ProtectedIndexRoute
  '/leagues/$leagueId': typeof ProtectedLeaguesLeagueIdRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/leagues': typeof ProtectedLeaguesRouteRouteWithChildren
  '/games': typeof ProtectedGamesRoute
  '/users': typeof ProtectedUsersRoute
  '/': typeof ProtectedIndexRoute
  '/leagues/$leagueId': typeof ProtectedLeaguesLeagueIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_protected': typeof ProtectedRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/_protected/leagues': typeof ProtectedLeaguesRouteRouteWithChildren
  '/_protected/games': typeof ProtectedGamesRoute
  '/_protected/users': typeof ProtectedUsersRoute
  '/_protected/': typeof ProtectedIndexRoute
  '/_protected/leagues/$leagueId': typeof ProtectedLeaguesLeagueIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/register'
    | '/leagues'
    | '/games'
    | '/users'
    | '/'
    | '/leagues/$leagueId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/register'
    | '/leagues'
    | '/games'
    | '/users'
    | '/'
    | '/leagues/$leagueId'
  id:
    | '__root__'
    | '/_protected'
    | '/login'
    | '/register'
    | '/_protected/leagues'
    | '/_protected/games'
    | '/_protected/users'
    | '/_protected/'
    | '/_protected/leagues/$leagueId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  ProtectedRoute: typeof ProtectedRouteWithChildren
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/': {
      id: '/_protected/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof ProtectedIndexRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/users': {
      id: '/_protected/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof ProtectedUsersRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/games': {
      id: '/_protected/games'
      path: '/games'
      fullPath: '/games'
      preLoaderRoute: typeof ProtectedGamesRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/leagues': {
      id: '/_protected/leagues'
      path: '/leagues'
      fullPath: '/leagues'
      preLoaderRoute: typeof ProtectedLeaguesRouteRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/leagues/$leagueId': {
      id: '/_protected/leagues/$leagueId'
      path: '/$leagueId'
      fullPath: '/leagues/$leagueId'
      preLoaderRoute: typeof ProtectedLeaguesLeagueIdRouteImport
      parentRoute: typeof ProtectedLeaguesRouteRoute
    }
  }
}

interface ProtectedLeaguesRouteRouteChildren {
  ProtectedLeaguesLeagueIdRoute: typeof ProtectedLeaguesLeagueIdRoute
}

const ProtectedLeaguesRouteRouteChildren: ProtectedLeaguesRouteRouteChildren = {
  ProtectedLeaguesLeagueIdRoute: ProtectedLeaguesLeagueIdRoute,
}

const ProtectedLeaguesRouteRouteWithChildren =
  ProtectedLeaguesRouteRoute._addFileChildren(
    ProtectedLeaguesRouteRouteChildren,
  )

interface ProtectedRouteChildren {
  ProtectedLeaguesRouteRoute: typeof ProtectedLeaguesRouteRouteWithChildren
  ProtectedGamesRoute: typeof ProtectedGamesRoute
  ProtectedUsersRoute: typeof ProtectedUsersRoute
  ProtectedIndexRoute: typeof ProtectedIndexRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedLeaguesRouteRoute: ProtectedLeaguesRouteRouteWithChildren,
  ProtectedGamesRoute: ProtectedGamesRoute,
  ProtectedUsersRoute: ProtectedUsersRoute,
  ProtectedIndexRoute: ProtectedIndexRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  ProtectedRoute: ProtectedRouteWithChildren,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
